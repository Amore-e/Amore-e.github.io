{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"计算机科学\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2020/04/12/computer-science/algorithm/hello-world/",
            "url": "http://example.com/2020/04/12/computer-science/algorithm/hello-world/",
            "title": "Hello World",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"markdownIt-Anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"markdownIt-Anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"markdownIt-Anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"markdownIt-Anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"markdownIt-Anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/04/12/computer-science/algorithm/%E6%8E%92%E5%BA%8F/",
            "url": "http://example.com/2020/04/12/computer-science/algorithm/%E6%8E%92%E5%BA%8F/",
            "title": "常见的几种排序算法",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<h1 id=\"排序\"><a class=\"markdownIt-Anchor\" href=\"#排序\">#</a> 排序</h1>\n<p>排序算法是数据结构中最基本的算法之一。</p>\n<p>排序算法可以分为<strong>内部排序和外部排序。</strong></p>\n<p>内部排序是数据记录在内存中进行排序。二外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p>\n<p><img data-src=\"F:%5CPictures%5C%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%5C1342514529_5795.jpg\" alt=\"\"></p>\n<p><img data-src=\"https://pic1.zhimg.com/80/v2-f50f588e8c546bb649b78f8ccc20689c_720w.jpg\" alt=\"img\"></p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20181108191001927.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Rjcm1n,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n<p>时间复杂度 **</p>\n<ol>\n<li>平方阶 (O (n2)) 排序 各类简单排序：直接插入、直接选择和冒泡排序。</li>\n<li>线性对数阶 (O (nlog2n)) 排序 快速排序、堆排序和归并排序；</li>\n<li>O (n1+§)) 排序，§ 是介于 0 和 1 之间的常数。 希尔排序</li>\n<li>线性阶 (O (n)) 排序 基数排序，此外还有桶、箱排序。</li>\n</ol>\n<p><strong>稳定性</strong></p>\n<ol>\n<li>稳定的排序算法：冒泡排序、插入排序、归并排序和基数排序。</li>\n<li>不是稳定的排序算法：选择排序、快速排序、希尔排序、堆排序。</li>\n</ol>\n<p><strong>冒泡排序</strong></p>\n<ul>\n<li>思想：冒泡排序是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢 “浮” 到数列的顶端。</li>\n<li>动画演示：</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/2019030515082371.gif\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>\n<p>代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">BubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; (<span class=\"keyword\">sizeof</span>(arr)/<span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>]))<span class=\"number\">-1</span> ;i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; (<span class=\"keyword\">sizeof</span>(arr)/<span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>])) <span class=\"number\">-1</span>- i;j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j]&gt;arr[j+<span class=\"number\">1</span>]) &#123;<span class=\"comment\">//相邻元素比较</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tepm = arr[j];<span class=\"comment\">// 两两交换</span></span><br><span class=\"line\">\t\t\t\tarr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\tarr[j + <span class=\"number\">1</span>] = tepm;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>选择排序</strong></p>\n<ul>\n<li>\n<p>思想： 选择排序是每一次从待排序的数据元素中选出最小的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。</p>\n</li>\n<li>\n<p>动画演示：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/2019030515170010.gif\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>代码实现：</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SelectSort</span><span class=\"params\">(<span class=\"keyword\">int</span> arr[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt;(<span class=\"keyword\">sizeof</span>(arr)/<span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>])) <span class=\"number\">-1</span>;i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> k = arr[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = i;j &lt; (<span class=\"keyword\">sizeof</span>(arr)/<span class=\"keyword\">sizeof</span>(arr[<span class=\"number\">0</span>])) - <span class=\"number\">1</span>;j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arr[j] &lt; k) &#123; <span class=\"comment\">//寻找最小的数</span></span><br><span class=\"line\">\t\t\t\tk = arr[j]; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (k &lt; arr[i]) </span><br><span class=\"line\">\t\t\tarr[i] = k;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>插入排序</strong></p>\n<ul>\n<li>思想：它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用 in-place 排序（即只需用到 O (1) 的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</li>\n<li>动画演示：</li>\n</ul>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190305152332174.gif\" alt=\"在这里插入图片描述\"></p>\n<ul>\n<li>\n<p>代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>希尔排序</strong></p>\n<ul>\n<li>\n<p>思想：希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，同时该算法是冲破 O (n2）的第一批算法之一。它与插入排序的不同之处在于，它会优先比较距离较远的元素。</p>\n<p>希尔排序是把记录按下表的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至 1 时，整个文件恰被分成一组，算法便终止。<br>\n<img data-src=\"https://img-blog.csdnimg.cn/20190305152953904.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01MY29uZ2NvbmdBSQ==,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n</li>\n<li>\n<p>动画演示：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190305153045812.gif\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>归并排序</strong></p>\n<ul>\n<li>\n<p>思想：该算法是采用<strong>分治法</strong>（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为 2 - 路归并。</p>\n</li>\n<li>\n<p>动画演示：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190305154824659.gif\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>快速排序</strong></p>\n<ul>\n<li>\n<p>思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p>\n<p>快速排序使用<strong>分治法</strong>来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>\n<p>从数列中挑出一个元素，称为 “基准”（pivot），即枢纽元；</p>\n<p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边），在这个分区退出之后，该基准就处于数列的中间位置，称为分区（partition）操作；</p>\n<p>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>\n</li>\n<li>\n<p>动画演示：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190305155529277.gif\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>堆排序</strong></p>\n<ul>\n<li>\n<p>思想：堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。<br>\n源于优先级序列：第一阶段，add 操作整体时间复杂度为 O (nlog n)；若第一阶段采用自底而上构建堆，时间复杂度为 O (n)；第二阶段 remove_min 操作整体时间复杂度为 O (nlog n)，总体时间复杂度为 O (nlog n)</p>\n</li>\n<li>\n<p>将初始待排序关键字序列 (R1,R2….Rn) 构建成大顶堆，此堆为初始的无序区；</p>\n<p>将堆顶元素 R [1] 与最后一个元素 R [n] 交换，此时得到新的无序区 (R1,R2,……Rn-1) 和新的有序区 (Rn), 且满足 R [1,2…n-1]&lt;=R [n]；</p>\n<p>由于交换后新的堆顶 R [1] 可能违反堆的性质，因此需要对当前无序区 (R1,R2,……Rn-1) 调整为新堆，然后再次将 R [1] 与无序区最后一个元素交换，得到新的无序区 (R1,R2….Rn-2) 和新的有序区 (Rn-1,Rn)。</p>\n<p>不断重复此过程直到有序区的元素个数为 n-1，则整个排序过程完成。不断重复此过程直到有序区的元素个数为 n-1，则整个排序过程完成。</p>\n</li>\n<li>\n<p>动画演示：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190305160256402.gif\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>计数排序</strong></p>\n<ul>\n<li>\n<p>思想：计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>\n<p>计数排序 (Counting sort) 是一种稳定的排序算法。计数排序使用一个额外的数组 C，其中第 i 个元素是待排序数组 A 中值等于 i 的元素的个数。然后根据数组 C 来将 A 中的元素排到正确的位置。它只能对整数进行排序。</p>\n<ol>\n<li>找出待排序的数组中最大和最小的元素；</li>\n<li>统计数组中每个值为 i 的元素出现的次数，存入数组 C 的第 i 项；</li>\n<li>对所有的计数累加（从 C 中的第一个元素开始，每一项和前一项相加）；</li>\n<li>反向填充目标数组：将每个元素 i 放在新数组的第 C (i) 项，每放一个元素就将 C (i) 减去 1</li>\n</ol>\n</li>\n<li>\n<p>动画演示：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190305161505758.gif\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>桶排序</strong></p>\n<ul>\n<li>\n<p>思想：桶排序 (Bucket sort) 是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。</p>\n<p>工作原理：假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序。</p>\n<p>设置一个 BucketSize，作为每个桶所能放置多少个不同数值</p>\n<p>设置一个定量的数组当作空桶；<br>\n遍历输入数据，并且把数据一个一个放到对应的桶里去；<br>\n对每个不是空的桶进行排序；<br>\n从不是空的桶里把排好序的数据拼接起来。<br>\n注意，如果递归使用桶排序为各个桶排序，则当桶数量为 1 时要手动减小 BucketSize 增加下一循环桶的数量，否则会陷入死循环，导致内存溢出。</p>\n</li>\n<li>\n<p>动画演示：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190305163056336.gif\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>代码实现：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>基数排序</strong></p>\n<ul>\n<li>\n<p>思想：基数排序也是非比较的排序算法，又称卡片排序；</p>\n<p>对每一位进行排序，从最低位开始排序，复杂度为 O (kn), n 为数组长度，k 为数组中的数的最大的位数；</p>\n<p>基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。</p>\n<p>有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。</p>\n<p>基数排序基于分别排序，分别收集，所以是稳定的。</p>\n<p>取得数组中的最大数，并取得位数；<br>\narr 为原始数组，从最低位开始取每个位组成 radix 数组；<br>\n对 radix 进行计数排序（利用计数排序适用于小范围数的特点）；<br>\nMSD ：从高位开始进行排序<br>\n LSD ：从低位开始进行排序</p>\n<p>对桶的使用方法上有明显<strong>差异</strong>：</p>\n<ul>\n<li>基数排序：根据键值的每位数字来分配桶</li>\n<li>计数排序：每个桶只存储单一键值</li>\n<li>桶排序：每个桶存储一定范围的数值</li>\n</ul>\n</li>\n<li>\n<p>动画演示：</p>\n<p><img data-src=\"https://img-blog.csdnimg.cn/20190305163804867.gif\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>代码实现：</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L01MY29uZ2NvbmdBSS9hcnRpY2xlL2RldGFpbHMvODgwODEyNDQ=\">参考文献</span></p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/04/12/computer-science/java/%E5%88%9D%E9%81%87java/",
            "url": "http://example.com/2020/04/12/computer-science/java/%E5%88%9D%E9%81%87java/",
            "title": "初遇java",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2020/04/12/computer-science/python/%E5%88%9D%E9%81%87python/",
            "url": "http://example.com/2020/04/12/computer-science/python/%E5%88%9D%E9%81%87python/",
            "title": "初遇python",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "http://example.com/2020/04/12/computer-science/java/java%E7%88%AC%E8%99%AB/",
            "url": "http://example.com/2020/04/12/computer-science/java/java%E7%88%AC%E8%99%AB/",
            "title": "java爬虫",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<h1 id=\"java爬虫\"><a class=\"markdownIt-Anchor\" href=\"#java爬虫\">#</a> java 爬虫</h1>\n<p>1、打开想要爬取的内容（网页），F12 进入 “开发者模式”，获取 request url。</p>\n<p><img data-src=\"assets%5Cjava%5C1.jpg\" alt=\"1\"></p>\n<p>2、爬取网页信息，得到一天的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String url = <span class=\"string\">&quot;http://top.news.sina.com.cn/ws/GetTopDataList.php?top_type=day&amp;top_cat=www_www_all_suda_suda&amp;top_time=20200920&amp;top_show_num=100&amp;top_order=DESC&amp;js_var=all_1_data01&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Document document = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            document = Jsoup.connect(url).get();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(document);</span></span><br><span class=\"line\">        <span class=\"comment\">//筛选出有用数据</span></span><br><span class=\"line\">        String body = document.select(<span class=\"string\">&quot;body&quot;</span>).html();</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(body);</span></span><br><span class=\"line\">        String subString = body.substring(<span class=\"number\">19</span>, body.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        System.out.println(subString);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"Hexo%5Csource%5Cassets%5Cjava%5C2.jpg\" alt=\"2\"></p>\n<p>3、将得到的信息对象转换成 JSON 数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">JSONObject json = JSONObject.parseObject(subString);</span><br><span class=\"line\"><span class=\"comment\">//System.out.println(json);</span></span><br><span class=\"line\">JSONArray jsonArray = json.getJSONArray(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(Object object : jsonArray)</span><br><span class=\"line\">            JSONObject news = (JSONObject)object;</span><br><span class=\"line\">            </span><br></pre></td></tr></table></figure>\n<p><img data-src=\"assets%5Cjava%5C3.jpg\" alt=\"3\"></p>\n<p>4、解析 JSON 文件，提取出 “title” 和 “create_date” 信息；</p>\n<p><img data-src=\"assets%5Cjava%5C4.jpg\" alt=\"4\"></p>\n<p>5、筛选出特定日期区间的信息，并把爬取的内容读取写入到指定文件中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFile</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        FileWriter fileWriter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!file.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                file.createNewFile();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fileWriter = <span class=\"keyword\">new</span> FileWriter(file, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            fileWriter.write(content);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fileWriter.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><img data-src=\"assets%5Cjava%5C5.jpg\" alt=\"5\"></p>\n<p>6、完整代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileWriter;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.ParseException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.SimpleDateFormat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Calendar;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.Jsoup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.jsoup.nodes.Document;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String url_prefix = <span class=\"string\">&quot;http://top.news.sina.com.cn/ws/GetTopDataList.php?top_type=day&amp;top_cat=www_www_all_suda_suda&amp;top_time=&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String url_suffix = <span class=\"string\">&quot;&amp;top_show_num=100&amp;top_order=DESC&amp;js_var=all_1_data01&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String start_Date = <span class=\"string\">&quot;2020-06-01&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String end_Date = <span class=\"string\">&quot;2020-09-20&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> String filePath = <span class=\"string\">&quot;F:\\\\JavaProjects\\\\6\\\\news.text&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        DateIncrease();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">writeFile</span><span class=\"params\">(String content)</span> </span>&#123;</span><br><span class=\"line\">        FileWriter fileWriter = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(filePath);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!file.exists()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                file.createNewFile();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fileWriter = <span class=\"keyword\">new</span> FileWriter(file, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">            fileWriter.write(content);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                fileWriter.close();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">DateIncrease</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        SimpleDateFormat sdf = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//起始日期</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Date startDate = sdf.parse(start_Date);</span><br><span class=\"line\">            <span class=\"comment\">//结束日期</span></span><br><span class=\"line\">            Date endDate = sdf.parse(end_Date);</span><br><span class=\"line\">            Date tempDate = startDate;</span><br><span class=\"line\"></span><br><span class=\"line\">            Calendar calendar = Calendar.getInstance();</span><br><span class=\"line\">            calendar.setTime(startDate);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//循环</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(tempDate.getTime() &lt; endDate.getTime()) &#123;</span><br><span class=\"line\">                tempDate = calendar.getTime();</span><br><span class=\"line\">                String date = sdf.format(tempDate);</span><br><span class=\"line\">                date = date.replace(<span class=\"string\">&quot;-&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//2020-03-28\t20200328</span></span><br><span class=\"line\">                String url = url_prefix + date + url_suffix;</span><br><span class=\"line\">                doGet(url);</span><br><span class=\"line\">                calendar.add(Calendar.DAY_OF_MONTH, <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(String url)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//访问url，获取内容</span></span><br><span class=\"line\">        Document document = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            document = Jsoup.connect(url).get();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// TODO Auto-generated catch block</span></span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(document);</span></span><br><span class=\"line\">        <span class=\"comment\">//筛选出有用数据</span></span><br><span class=\"line\">        String body = document.select(<span class=\"string\">&quot;body&quot;</span>).html();</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(body);</span></span><br><span class=\"line\">        String subString = body.substring(<span class=\"number\">19</span>, body.length()-<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(subString);</span></span><br><span class=\"line\">        JSONObject json = JSONObject.parseObject(subString);</span><br><span class=\"line\">        <span class=\"comment\">//System.out.println(json);</span></span><br><span class=\"line\">        JSONArray jsonArray = json.getJSONArray(<span class=\"string\">&quot;data&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(Object object : jsonArray) &#123;</span><br><span class=\"line\">            JSONObject news = (JSONObject)object;</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(news);</span></span><br><span class=\"line\">            String title = news.getString(<span class=\"string\">&quot;title&quot;</span>);</span><br><span class=\"line\">            String date = news.getString(<span class=\"string\">&quot;create_date&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//System.out.println(date+&quot; &quot;+title);</span></span><br><span class=\"line\">            writeFile(date+<span class=\"string\">&quot;\\t&quot;</span>+title+<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/04/12/computer-science/r/R%E8%AF%AD%E8%A8%80%EF%BC%9A%E7%AC%AC%E4%B8%80%E8%AF%BE/",
            "url": "http://example.com/2020/04/12/computer-science/r/R%E8%AF%AD%E8%A8%80%EF%BC%9A%E7%AC%AC%E4%B8%80%E8%AF%BE/",
            "title": "R语言：第一课",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<h1 id=\"r语言第一课\"><a class=\"markdownIt-Anchor\" href=\"#r语言第一课\">#</a> R 语言：第一课</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9yL3Itc2V0dXAuaHRtbA==\">R 语言的环境安装</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xYTBmMjUwODZlOGI=\">RStudio 安装</span></p>\n<h3 id=\"1-从帮助文档中获取信息\"><a class=\"markdownIt-Anchor\" href=\"#1-从帮助文档中获取信息\">#</a> <strong>1、从帮助文档中获取信息</strong></h3>\n<p>常用帮助函数包括：</p>\n<p><u>help.start()</u>: 该命令会打开浏览器的窗口，显示帮助文档的首页。</p>\n<p><u>help()、args()、example()</u>: 了解更多关于某个函数的信息、调用简介和操作实例。help (函数名)，等价于 <u>？函数名</u>    。</p>\n<p><u>help.search()</u>: 查看是否有实现某种功能的函数。等价于<u>?? 加函数名</u>。</p>\n<p><u>help(package=&quot;…&quot;)</u>: 查阅特定包的信息。</p>\n<p><u>RSiteSearch()</u>: 可以使用关键词来搜索在线的帮助文档和邮件列表存档。</p>\n<p><u>apropos()</u>: 以局部匹配的方式进行关键词搜索，即返回名称中含有某个关键词的所有对象。</p>\n<h3 id=\"2-基础包和扩展包\"><a class=\"markdownIt-Anchor\" href=\"#2-基础包和扩展包\">#</a> <strong>2、基础包和扩展包</strong></h3>\n<p>1）、随着 R 语言一起安装的、用于执行各种统计或制图等基本功能的程式包，称为基础包（标准包）。</p>\n<p>主要的基础包：</p>\n<table>\n<thead>\n<tr>\n<th>基础包</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>base</td>\n<td>提供各类基础函数</td>\n</tr>\n<tr>\n<td>datasets</td>\n<td>提供各种示例数据集</td>\n</tr>\n<tr>\n<td>graphics</td>\n<td>提供各种基础绘图函数</td>\n</tr>\n<tr>\n<td>grDevices</td>\n<td>提供基础或者 grid 图形设备</td>\n</tr>\n<tr>\n<td>methods</td>\n<td>用于 R 对象或者编程工具的方法和类的定义</td>\n</tr>\n<tr>\n<td>utils</td>\n<td>提供 R 语言工具函数</td>\n</tr>\n<tr>\n<td>stats</td>\n<td>提供常用统计函数</td>\n</tr>\n</tbody>\n</table>\n<p>2）、除了基础包以外，基于 R 语言的来源特性，各个领域的专家和使用者编写了大量扩展性的软件包，简称为扩展包（捐献包）。</p>\n<h3 id=\"常用命令\"><a class=\"markdownIt-Anchor\" href=\"#常用命令\">#</a> <strong>常用命令</strong></h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">命令</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">setwd()</td>\n<td style=\"text-align:left\">查看当前目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setwd()</td>\n<td style=\"text-align:left\">设置目录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">install.package()</td>\n<td style=\"text-align:left\">安装包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">library () 或 require ()</td>\n<td style=\"text-align:left\">加载包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">.packages(all.available=TRUE)</td>\n<td style=\"text-align:left\">查看本地安装的所有包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">demo(package=.packages(all.available=TRUE))</td>\n<td style=\"text-align:left\">查看所有包中可供演示的部分</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-变量\"><a class=\"markdownIt-Anchor\" href=\"#3-变量\">#</a> <strong>3、变量</strong></h3>\n<p>R 语言的变量名称由字母、数字以及 ** <code>.</code> ** 或者下划线 <code>_</code> 组成。</p>\n<p>变量名称以字母或者 <code>.</code>  开头。  <code>.</code>  号开头后面不能跟着数字。</p>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2020/04/12/computer-science/r/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/",
            "url": "http://example.com/2020/04/12/computer-science/r/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/",
            "title": "数据操作",
            "date_published": "2020-04-12T12:46:25.000Z",
            "content_html": "<h1 id=\"数据操作\"><a class=\"markdownIt-Anchor\" href=\"#数据操作\">#</a> 数据操作</h1>\n<blockquote>\n<p><strong>1、对象</strong></p>\n<p><strong>2、属性、类和模式</strong></p>\n<p><strong>3、数据结构</strong></p>\n<ul>\n<li>\n<p>向量</p>\n</li>\n<li>\n<p>矩阵</p>\n</li>\n<li>\n<p>数组</p>\n</li>\n<li>\n<p>数据框</p>\n</li>\n<li>\n<p>因子</p>\n</li>\n<li>\n<p>列表</p>\n</li>\n<li>\n<p>时间序列</p>\n</li>\n</ul>\n<p><strong>4、数据载入</strong></p>\n<ul>\n<li>\n<p>R 语言中的内部数据测试集</p>\n</li>\n<li>\n<p>从外部文件读取数据</p>\n</li>\n</ul>\n<blockquote>\n<p>函数 read.csv ()</p>\n<p>函数 read.table ()</p>\n<p>使用扩展包 gdata 中的 read.xls () 函数</p>\n<p>使用扩展 RODBC 中的相关函数来读取数据</p>\n<p>使用扩展包 foreign 载入其他软件录入的数据</p>\n</blockquote>\n<p><strong>5、数据输出</strong></p>\n<ul>\n<li>\n<p>使用函数 write.table () 导出数据</p>\n</li>\n<li>\n<p>使用函数 sink () 输出信息</p>\n</li>\n</ul>\n<p><strong>6、数据管理</strong></p>\n<ul>\n<li>\n<p>通过下标访问数据</p>\n<blockquote>\n<p>访问向量中的元素</p>\n<p>访问矩阵的子集</p>\n<p>访问数组的子集</p>\n<p>访问数据框的子集</p>\n<p>访问列表的子集</p>\n</blockquote>\n</li>\n<li>\n<p>用 subset () 函数提子集</p>\n</li>\n<li>\n<p>数据排序</p>\n<blockquote>\n<p>使用 sort () 函数对向量进行排序</p>\n<p>使用 order () 和 arrange () 函数对数据框进行排序</p>\n<p>使用 rank () 函数进行排序</p>\n</blockquote>\n</li>\n<li>\n<p>数据合并</p>\n</li>\n<li>\n<p>扩展包 reshape2 重塑数据</p>\n</li>\n<li>\n<p>日期数据的处理</p>\n</li>\n</ul>\n<p><strong>7、常用命令</strong></p>\n</blockquote>\n<h2 id=\"一-对象\"><a class=\"markdownIt-Anchor\" href=\"#一-对象\">#</a> <strong>一、对象</strong></h2>\n<p>R 语言是一种<u><strong>基于对象</strong></u>的语言。</p>\n<h2 id=\"二-属性-类和模式\"><a class=\"markdownIt-Anchor\" href=\"#二-属性-类和模式\">#</a> <strong>二、属性、类和模式</strong></h2>\n<p>attributes () 查看对象的属性。</p>\n<p>class () 查看对象的类。</p>\n<p>mode () 查看对象的存储类型。</p>\n<h2 id=\"三-数据结构\"><a class=\"markdownIt-Anchor\" href=\"#三-数据结构\">#</a> <strong>三、数据结构</strong></h2>\n<ul>\n<li>\n<p><u>向量</u>vector</p>\n<p>向量是 R 语言中最基本的数据结构</p>\n<p><img data-src=\"C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200928144220264.png\" alt=\"image-20200928144220264\"></p>\n<p><img data-src=\"C:%5CUsers%5CASUS%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200928144738564.png\" alt=\"image-20200928144738564\"></p>\n</li>\n</ul>\n",
            "tags": []
        }
    ]
}