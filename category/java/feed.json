{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hexo • All posts by \"java\" category",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2021/07/15/computer-science/java/Java-%E5%88%9D%E9%81%87/",
            "url": "http://example.com/2021/07/15/computer-science/java/Java-%E5%88%9D%E9%81%87/",
            "title": "Java-初遇",
            "date_published": "2021-07-15T10:23:23.000Z",
            "content_html": "<h1 id=\"font-color7b68eejava-发展历程font\"><a class=\"markdownIt-Anchor\" href=\"#font-color7b68eejava-发展历程font\">#</a> <font color=\"#7B68EE\">Java 发展历程</font></h1>\n<ul>\n<li>1995 年， <code>Java 语言诞生</code> ，由  <code>Sun</code>  公司推出；</li>\n<li>2004 年，发布  <code>J2SE 1.5</code>  ，成为 Java 语言发展史上重要版本。</li>\n<li>2009 年，Sun 公司被  <code>Oracle</code>  公司收购。</li>\n<li>2014 年，发布  <code>JDK 8.0</code>  。</li>\n<li>2018 年，发布 JDK 11.0 。</li>\n</ul>\n<h1 id=\"font-color7b68eejava-体系font\"><a class=\"markdownIt-Anchor\" href=\"#font-color7b68eejava-体系font\">#</a> <font color=\"#7B68EE\">Java 体系</font></h1>\n<ul>\n<li>\n<p><code>JavaSE</code> ，Java 的基础和核心。允许开发和部署在桌面、服务器、嵌入式环境和实时环境中使用的 Java 应用程序。</p>\n</li>\n<li>\n<p><code>JavaEE</code> ， Java 企业版。多用于 Web 系统的服务端开发。</p>\n</li>\n<li>\n<p><code>JavaME</code> ， Java 小型版。可以用于嵌入式设备的 Java 程序开发。可以用于移动端的开发（不同于 Android 开发）。</p>\n</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/WnouzF\"><img data-src=\"https://z3.ax1x.com/2021/07/15/WnouzF.png\" alt=\"WnouzF.png\"></a></p>\n<h1 id=\"font-color7b68eejava-特性和优势font\"><a class=\"markdownIt-Anchor\" href=\"#font-color7b68eejava-特性和优势font\">#</a> <font color=\"#7B68EE\">Java 特性和优势</font></h1>\n<ul>\n<li>\n<p><code>跨平台性（可移植性）</code> ：跨平台性是 Java 语言的核心优势。</p>\n</li>\n<li>\n<p><code>面向对象</code> ： Java 是一门完全面向对象的语言。</p>\n<p><code>面向对象和面向过程的区别</code> ：</p>\n<ul>\n<li>\n<p>面向对象具有三大特征：封装性、继承性和多态性，而面向过程没有继承性和多态性，并且面向过程的封装只是封装功能，而面向对象可以封装数据和功能。所以面向对象优势更明显。</p>\n</li>\n<li>\n<p>一个经典的比喻：面向对象是盖浇饭、面向过程是蛋炒饭。<br>\n盖浇饭的好处就是 “菜”“饭” 分离，从而提高了制作盖浇饭的灵活性。饭不满意就换饭，菜不满意换菜。用软件工程的专业术语就是 “可维护性” 比较好，“饭” 和 “菜” 的耦合度比较低。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>健壮性</code> ：归功于垃圾回收机制（GC）。</p>\n</li>\n<li>\n<p>高能性： <code>即时编译技术</code> 。</p>\n<ul>\n<li><code>即时编译技术</code> ：JVM 可判断某段字节码其是否属于 <code>使用频率较高</code> 的热点代码。如果是，就会将字节码文件转换出的本地机器码保存，以便下次直接执行机器码文件。这使得 Java 程序的执行效率得到很大的提高。</li>\n</ul>\n</li>\n<li>\n<p>安全性：Java 的 <code>存储分配模型</code> 是它防御恶意代码的要方法之一。</p>\n</li>\n<li>\n<p>简单性：Java 相较 C++，去掉了一些一般程序员很少使用的特征。例如:</p>\n<ul>\n<li>Java 不支持<font color=\"red\">go to</font>语句，代之以提供 break 和 continue 语句以及异常处理。</li>\n<li>Java 还剔除了 C++ 的操作符过载<font color=\"red\">(overload)</font>和多继承特征，并且不使用主文件，免去了预处理程序。</li>\n<li>因为 Java 没有结构，数组和串都是对象，所以不需要<font color=\"red\">指针</font>。Java 能够自动处理对象的引用和间接引用，实现自动的无用单元收集。</li>\n</ul>\n</li>\n<li>\n<p>分布式：Java 设计成支持在网络上应用，它是分布式语言。网络变成软件应用的 <code>分布运载工具</code> 。Java 程序只要编写一次，就可到处运行。</p>\n</li>\n<li>\n<p>多线程性</p>\n</li>\n</ul>\n<h1 id=\"font-color7b68eejava-两种核心机制font\"><a class=\"markdownIt-Anchor\" href=\"#font-color7b68eejava-两种核心机制font\">#</a> <font color=\"#7B68EE\">Java 两种核心机制</font></h1>\n<ul>\n<li>\n<p><code>JVM（Java虚拟机）</code></p>\n<ul>\n<li>不同平台，JVM 不同；</li>\n<li>一次编译，出出运行；</li>\n</ul>\n</li>\n<li>\n<p><code>垃圾回收机制（GC）</code></p>\n<ul>\n<li>C 语言中，是由程序员负责的。</li>\n<li>Java 中由系统级的线程跟踪存储空间的分配情况，当 JVM 空闲时，检查并释放可以被释放的空间。</li>\n<li>这个过程是自动的。程序员无法精确控制和干预。</li>\n<li>程序仍然会出现内存泄漏和内存溢出的问题。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"font-color7b68eejdk-jre-jvmfont\"><a class=\"markdownIt-Anchor\" href=\"#font-color7b68eejdk-jre-jvmfont\">#</a> <font color=\"#7B68EE\">JDK、JRE、JVM</font></h1>\n<ul>\n<li>\n<p><code>JVM </code> <br>\nJVM（Java Virtual Machine，Java 虚拟机）是整个 Java 实现跨平台的最核心的部分，负责解释并执行字节码文件。</p>\n</li>\n<li>\n<p><code>JRE</code> <br>\nJRE（Java Runtime Environment，Java 运行环境）<br>\n <code>JRE = JVM + 核心API</code></p>\n</li>\n<li>\n<p><code>JDK</code> <br>\nJDK（Java Development Kit，Java 开发工具包），是整个 java 的核心。<br>\n包括编译工具 <code>javac</code> 、执行程序 <code>java</code> 、文档工具 <code>javadoc</code>  和反编译工具 <code>javap</code>  等使用工具。<br>\n <code>JDK = JRE + java开发工具</code></p>\n</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/WnowsH\"><img data-src=\"https://z3.ax1x.com/2021/07/15/WnowsH.png\" alt=\"WnowsH.png\"></a></p>\n<h1 id=\"font-color7b68eejava-程序工作原理font\"><a class=\"markdownIt-Anchor\" href=\"#font-color7b68eejava-程序工作原理font\">#</a> <font color=\"#7B68EE\">Java 程序工作原理</font></h1>\n<p> <br>\njava 程序执行过程，大致分为两步：</p>\n<ul>\n<li>通过编译工具 <code>javac</code>  将源码文件（.java）转换成字节码（.class）。</li>\n<li>通过 <code>JVM</code>  将字节码解释为机器码，进而在具体的系统平台上执行。</li>\n</ul>\n<p><code>源码——&gt;字节码</code></p>\n<ul>\n<li><code>词汇和语法分析</code> ：分析源码的执行逻辑，并将其绘制成一个抽象的语法树。</li>\n<li><code>填写符号表</code> ：复杂的程序之间会相互引用，此阶段就会对这些引用关系进行一些预处理工作。（理解：用一些符号来表示各个程序之间的关系。）</li>\n<li><code>注释处理</code> ：对注释进行分析和归类。</li>\n<li><code>生成字节码</code> ：根据前三个阶段的结果，最终生成字节码文件。</li>\n<li><a href=\"https://imgtu.com/i/Wnwran\"><img data-src=\"https://z3.ax1x.com/2021/07/15/Wnwran.png\" alt=\"Wnwran.png\"></a><br>\n </li>\n</ul>\n<p><code>字节码的解释过程</code></p>\n<p>    java 字节码文件先后经过 <code>类加载器</code> 、 <code>字节码校验器</code> 、 <code>解释器</code> 的处理后，最终在擦做系统平台上运行。</p>\n<p><a href=\"https://imgtu.com/i/Wnws5q\"><img data-src=\"https://z3.ax1x.com/2021/07/15/Wnws5q.png\" alt=\"Wnws5q.png\"></a></p>\n<ul>\n<li>\n<p><code>类装载器</code> ：其主要功能是为执行程序寻找和装载所需要的类（把字节码文件装到 java 虚拟机中。）</p>\n</li>\n<li>\n<p><code>字节码校验器</code> ：其功能是对字节码文件进行校验，保证代码的 <code>安全性</code> 。负责测试代码段落格式并进行检查，检查伪造指针、违反对象访问权限或是试图改变对象类型的非法代码。</p>\n</li>\n<li>\n<p><code>解释器</code> ：具体的平台并不认识字节码文件，最终起作用的还是这个最重要的解释器，它负责将字节码文件 <code>翻译</code> 成所在平台的能识别的东西。</p>\n</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "http://example.com/2021/07/15/computer-science/java/Java-HelloWorld/",
            "url": "http://example.com/2021/07/15/computer-science/java/Java-HelloWorld/",
            "title": "Java-HelloWorld",
            "date_published": "2021-07-15T10:23:23.000Z",
            "content_html": "<h1 id=\"font-color7b68eehelloworldfont\"><a class=\"markdownIt-Anchor\" href=\"#font-color7b68eehelloworldfont\">#</a> <font color=\"#7B68EE\">HelloWorld</font></h1>\n<p>开发 java 程序步骤：</p>\n<blockquote>\n<p>编写程序<br>\n编译程序<br>\n运行程序</p>\n</blockquote>\n<ul>\n<li><strong> <code>常用dos命令</code> </strong></li>\n</ul>\n<p>在开发 java 程序的过程中，需要在 dos 命令窗口执行命令对源程序进行编译，因此我们需要了解基本的 dos 命令。<br>\n<a href=\"https://imgtu.com/i/WElAr4\"><img data-src=\"https://z3.ax1x.com/2021/07/13/WElAr4.md.png\" alt=\"WElAr4.md.png\"></a></p>\n<ul>\n<li><strong> <code>编写程序</code> </strong></li>\n</ul>\n<p>新建一个.java 文件，用记事本打开，写入以下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> </p>\n<ul>\n<li>\n<p><strong> <code>编译源程序</code> </strong></p>\n<p><code>win+R</code>  键入  <code>cmd</code>  进入 dos 命令操作窗口。<br>\n <code>javac HelloWorld.java</code></p>\n</li>\n</ul>\n<p>编译结束后会出现一个.class 文件，是字节码文件。<br>\n<a href=\"https://imgtu.com/i/WE1Z6S\"><img data-src=\"https://z3.ax1x.com/2021/07/13/WE1Z6S.md.jpg\" alt=\"WE1Z6S.md.jpg\"></a></p>\n<ul>\n<li>\n<p><strong> <code>执行程序</code> </strong></p>\n<p><code>java HelloWorld</code> <br>\n 将该字节码文件通过 JVM 解释给计算机并执行。<br>\n<a href=\"https://imgtu.com/i/WE1a79\"><img data-src=\"https://z3.ax1x.com/2021/07/13/WE1a79.png\" alt=\"WE1a79.png\"></a></p>\n</li>\n</ul>\n<p> </p>\n<p><font color=\"#40E0D0\">源码解析</font></p>\n<blockquote>\n<p>（1） <code>public</code>  修饰符用于限定类或类成员的访问级别。<br>\n（2） <code>class</code>  关键字用于定义类，该类的标识符 是 HelloWorld。<br>\n（3）HelloWorld 类被 public 修饰，应在名为 HelloWorld.java 的文件中声明。<br>\n（5）类标识符后紧跟一对大括号，类成员一般定义在这对大括号中，例如实例成员或者静态成员。<br>\n（6） <code>static</code>  关键字用于声明静态成员，这里定义的是一个静态函数，标识符是 main。<br>\n（7） <code>函数标识符</code> 的命名一般采用 <code>驼峰命令法</code> 。<br>\n（8） <code>void</code>  关键字用于定义无返回值的函数。<br>\n（9） <code>main函数</code> 是 Java 程序的主 <code>入口函数</code> 。<br>\n（10）函数标识符后紧跟一对小括号， <code>形式参数</code> 一般定义在这对小括号中，这些形式参数在程序运行时可用于接受来自外部传入的实际参数。<br>\n（11） <code>String</code>  关键字用于定义字符串类型的变量。<br>\n（12） <code>String[]</code>  用于定义字符串类型的数组，该数组的标识符是 args。<br>\n（13）该源程序中的 main 函数的 <code>函数签名</code> 是： <code>public static void main(String[] args)</code> <br>\n（14）在函数签名后紧跟一堆大括号，代码块一般定义在这对大括号中，大括号（包括大括号本身）内的所有代码的集合被称之为 <code>函数体</code> 。<br>\n（15）一个完整的 <code>函数成员</code> 是由函数签名和函数体组成。<br>\n（16） <code>System</code>  是来自 java.lang 包下的一个类。<br>\n（17） <code>out</code>  是 System 类中的一个静态成员，它是 <span class=\"exturl\" data-url=\"aHR0cDovL2phdmEuaW8=\">java.io</span> 包下 PrintStream 类的实例。<br>\n（18） <code>println</code>  是 out 提供的一个实例成员，而且是函数成员。<br>\n（19）访问静态成员的语法是  <code>类名.成员名</code> ，访问实例成员的语法是  <code>实例名.成员名</code> 。<br>\n（20）在代码中 <code>调用一个函数</code> 时需要在该函数名后跟一对小括号，如果该函数需要传递参数，则将对应的实际参数按类型和顺序写到小括号中，并使用英文逗号隔开即可。<br>\n（21）定义 <code>字符串的字面量</code> 是直接将字符串写在双引号中，例如 “Hello World!”。<br>\n（22） <code>分号</code> 代表一行或者一段代码的结束。</p>\n</blockquote>\n<p> </p>\n<blockquote>\n<p><font color=\"#40E0D0\">Java11 新特性</font>：编译运行一步到位： <code>java HelloWorld.java</code></p>\n</blockquote>\n<p> </p>\n<p><font color=\"#40E0D0\">执行程序过程中可能遇到的问题</font></p>\n<blockquote>\n<p>&lt;1&gt; 文件扩展名修改失败。原因很可能是你没有显示出扩展名。<br>\n<font color=\"green\">解决办法：</font>  显示文件的扩展名，然后再修改。<br>\n<a href=\"https://imgtu.com/i/WE3H8x\"><img data-src=\"https://z3.ax1x.com/2021/07/13/WE3H8x.md.png\" alt=\"WE3H8x.md.png\"></a></p>\n</blockquote>\n<blockquote>\n<p>&lt;2&gt; 编码问题。<br>\n<a href=\"https://imgtu.com/i/WE8yee\"><img data-src=\"https://z3.ax1x.com/2021/07/13/WE8yee.png\" alt=\"WE8yee.png\"></a><br>\n<font color=\"green\">解决办法：</font>一个方法是，可以将文件另存为，同时设置编码格式为 utf-8。<br>\n另一个方法是，在编译时指定编码格式  <code>javac HelloWorld -encodeing utf-8</code> 。<br>\n<a href=\"https://imgtu.com/i/WEGltA\"><img data-src=\"https://z3.ax1x.com/2021/07/13/WEGltA.md.png\" alt=\"WEGltA.md.png\"></a></p>\n</blockquote>\n",
            "tags": []
        }
    ]
}